// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: files_metadata.sql

package db

import (
	"context"
)

const createFileMetadata = `-- name: CreateFileMetadata :one
INSERT INTO files_metadata (
  file_id,
  key,
  value
) VALUES (
  $1, $2, $3
)
RETURNING id, file_id, key, value, created_at
`

type CreateFileMetadataParams struct {
	FileID int64  `json:"file_id"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

func (q *Queries) CreateFileMetadata(ctx context.Context, arg CreateFileMetadataParams) (FilesMetadatum, error) {
	row := q.db.QueryRowContext(ctx, createFileMetadata, arg.FileID, arg.Key, arg.Value)
	var i FilesMetadatum
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFileMetadata = `-- name: DeleteFileMetadata :exec
DELETE FROM files_metadata
WHERE key = $1 and file_id = $2
`

type DeleteFileMetadataParams struct {
	Key    string `json:"key"`
	FileID int64  `json:"file_id"`
}

func (q *Queries) DeleteFileMetadata(ctx context.Context, arg DeleteFileMetadataParams) error {
	_, err := q.db.ExecContext(ctx, deleteFileMetadata, arg.Key, arg.FileID)
	return err
}

const listFileMetadata = `-- name: ListFileMetadata :many
SELECT id, file_id, key, value, created_at FROM files_metadata
WHERE file_id = $1 
ORDER BY key
`

func (q *Queries) ListFileMetadata(ctx context.Context, fileID int64) ([]FilesMetadatum, error) {
	rows, err := q.db.QueryContext(ctx, listFileMetadata, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilesMetadatum
	for rows.Next() {
		var i FilesMetadatum
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFileMetadata = `-- name: UpdateFileMetadata :exec
UPDATE files_metadata
  set value = $3
WHERE key = $1 and file_id = $2
`

type UpdateFileMetadataParams struct {
	Key    string `json:"key"`
	FileID int64  `json:"file_id"`
	Value  string `json:"value"`
}

func (q *Queries) UpdateFileMetadata(ctx context.Context, arg UpdateFileMetadataParams) error {
	_, err := q.db.ExecContext(ctx, updateFileMetadata, arg.Key, arg.FileID, arg.Value)
	return err
}
