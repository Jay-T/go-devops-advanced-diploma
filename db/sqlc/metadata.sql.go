// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: metadata.sql

package db

import (
	"context"
	"database/sql"
)

const createOrUpdateFileMetadata = `-- name: CreateOrUpdateFileMetadata :one
INSERT INTO metadata (
  file_id,
  key,
  value
) VALUES (
  $1, $2, $3
)
ON CONFLICT(file_id, key) 
DO UPDATE
 set value = $3
RETURNING id, secret_id, file_id, key, value, created_at
`

type CreateOrUpdateFileMetadataParams struct {
	FileID sql.NullInt64 `json:"file_id"`
	Key    string        `json:"key"`
	Value  string        `json:"value"`
}

func (q *Queries) CreateOrUpdateFileMetadata(ctx context.Context, arg CreateOrUpdateFileMetadataParams) (Metadatum, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateFileMetadata, arg.FileID, arg.Key, arg.Value)
	var i Metadatum
	err := row.Scan(
		&i.ID,
		&i.SecretID,
		&i.FileID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const createOrUpdateSecretMetadata = `-- name: CreateOrUpdateSecretMetadata :one
INSERT INTO metadata (
  secret_id,
  key,
  value
) VALUES (
  $1, $2, $3
)
ON CONFLICT(secret_id, key) 
DO UPDATE
 set value = $3
RETURNING id, secret_id, file_id, key, value, created_at
`

type CreateOrUpdateSecretMetadataParams struct {
	SecretID sql.NullInt64 `json:"secret_id"`
	Key      string        `json:"key"`
	Value    string        `json:"value"`
}

func (q *Queries) CreateOrUpdateSecretMetadata(ctx context.Context, arg CreateOrUpdateSecretMetadataParams) (Metadatum, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateSecretMetadata, arg.SecretID, arg.Key, arg.Value)
	var i Metadatum
	err := row.Scan(
		&i.ID,
		&i.SecretID,
		&i.FileID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllFileMetadata = `-- name: DeleteAllFileMetadata :exec
DELETE FROM metadata
WHERE file_id = $1
`

func (q *Queries) DeleteAllFileMetadata(ctx context.Context, fileID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteAllFileMetadata, fileID)
	return err
}

const deleteAllSecretMetadata = `-- name: DeleteAllSecretMetadata :exec
DELETE FROM metadata
WHERE secret_id = $1
`

func (q *Queries) DeleteAllSecretMetadata(ctx context.Context, secretID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteAllSecretMetadata, secretID)
	return err
}

const deleteOneFileMetadata = `-- name: DeleteOneFileMetadata :exec
DELETE FROM metadata
WHERE file_id = $1 and key = $2
`

type DeleteOneFileMetadataParams struct {
	FileID sql.NullInt64 `json:"file_id"`
	Key    string        `json:"key"`
}

func (q *Queries) DeleteOneFileMetadata(ctx context.Context, arg DeleteOneFileMetadataParams) error {
	_, err := q.db.ExecContext(ctx, deleteOneFileMetadata, arg.FileID, arg.Key)
	return err
}

const deleteOneSecretMetadata = `-- name: DeleteOneSecretMetadata :exec
DELETE FROM metadata
WHERE secret_id = $1 and key = $2
`

type DeleteOneSecretMetadataParams struct {
	SecretID sql.NullInt64 `json:"secret_id"`
	Key      string        `json:"key"`
}

func (q *Queries) DeleteOneSecretMetadata(ctx context.Context, arg DeleteOneSecretMetadataParams) error {
	_, err := q.db.ExecContext(ctx, deleteOneSecretMetadata, arg.SecretID, arg.Key)
	return err
}

const listFileMetadata = `-- name: ListFileMetadata :many
SELECT id, secret_id, file_id, key, value, created_at FROM metadata
WHERE file_id = $1
ORDER BY key
`

func (q *Queries) ListFileMetadata(ctx context.Context, fileID sql.NullInt64) ([]Metadatum, error) {
	rows, err := q.db.QueryContext(ctx, listFileMetadata, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metadatum
	for rows.Next() {
		var i Metadatum
		if err := rows.Scan(
			&i.ID,
			&i.SecretID,
			&i.FileID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSecretMetadata = `-- name: ListSecretMetadata :many
SELECT id, secret_id, file_id, key, value, created_at FROM metadata
WHERE secret_id = $1 
ORDER BY key
`

func (q *Queries) ListSecretMetadata(ctx context.Context, secretID sql.NullInt64) ([]Metadatum, error) {
	rows, err := q.db.QueryContext(ctx, listSecretMetadata, secretID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metadatum
	for rows.Next() {
		var i Metadatum
		if err := rows.Scan(
			&i.ID,
			&i.SecretID,
			&i.FileID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
