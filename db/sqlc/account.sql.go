// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: account.sql

package db

import (
	"context"
)

const blockAccount = `-- name: BlockAccount :exec
UPDATE account
  set blocked = true
WHERE username = $1
`

func (q *Queries) BlockAccount(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, blockAccount, username)
	return err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
  username,
  passhash
) VALUES (
  $1, $2
)
RETURNING id, username, passhash, blocked, created_at
`

type CreateAccountParams struct {
	Username string `json:"username"`
	Passhash string `json:"passhash"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Username, arg.Passhash)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Passhash,
		&i.Blocked,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE username = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, username)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, passhash, blocked, created_at FROM account
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Passhash,
		&i.Blocked,
		&i.CreatedAt,
	)
	return i, err
}
