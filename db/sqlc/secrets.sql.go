// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: secrets.sql

package db

import (
	"context"
)

const createSecret = `-- name: CreateSecret :one
INSERT INTO secrets (
  account_id,
  key,
  value
) VALUES (
  $1, $2, $3
)
RETURNING id, account_id, key, value, created_at
`

type CreateSecretParams struct {
	AccountID int64  `json:"account_id"`
	Key       string `json:"key"`
	Value     string `json:"value"`
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, createSecret, arg.AccountID, arg.Key, arg.Value)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSecret = `-- name: DeleteSecret :exec
DELETE FROM secrets
WHERE key = $1 and account_id = $2
`

type DeleteSecretParams struct {
	Key       string `json:"key"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) DeleteSecret(ctx context.Context, arg DeleteSecretParams) error {
	_, err := q.db.ExecContext(ctx, deleteSecret, arg.Key, arg.AccountID)
	return err
}

const getSecret = `-- name: GetSecret :one
SELECT id, account_id, key, value, created_at FROM secrets
WHERE key = $1 and account_id = $2 LIMIT 1
`

type GetSecretParams struct {
	Key       string `json:"key"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) GetSecret(ctx context.Context, arg GetSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, getSecret, arg.Key, arg.AccountID)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const listSecrets = `-- name: ListSecrets :many
SELECT id, account_id, key, value, created_at FROM secrets
WHERE account_id = $1 
ORDER BY key
`

func (q *Queries) ListSecrets(ctx context.Context, accountID int64) ([]Secret, error) {
	rows, err := q.db.QueryContext(ctx, listSecrets, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secret
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Key,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecret = `-- name: UpdateSecret :exec
UPDATE secrets
  set value = $3
WHERE key = $1 and account_id = $2
`

type UpdateSecretParams struct {
	Key       string `json:"key"`
	AccountID int64  `json:"account_id"`
	Value     string `json:"value"`
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) error {
	_, err := q.db.ExecContext(ctx, updateSecret, arg.Key, arg.AccountID, arg.Value)
	return err
}
