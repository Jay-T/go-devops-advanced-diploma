// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Jay-T/go-devops-advanced-diploma/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/Jay-T/go-devops-advanced-diploma/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BlockAccount mocks base method.
func (m *MockStore) BlockAccount(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockAccount indicates an expected call of BlockAccount.
func (mr *MockStoreMockRecorder) BlockAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockAccount", reflect.TypeOf((*MockStore)(nil).BlockAccount), arg0, arg1)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 db.CreateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateFile mocks base method.
func (m *MockStore) CreateFile(arg0 context.Context, arg1 db.CreateFileParams) (db.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0, arg1)
	ret0, _ := ret[0].(db.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockStoreMockRecorder) CreateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockStore)(nil).CreateFile), arg0, arg1)
}

// CreateSecret mocks base method.
func (m *MockStore) CreateSecret(arg0 context.Context, arg1 db.CreateSecretParams) (db.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1)
	ret0, _ := ret[0].(db.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockStoreMockRecorder) CreateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockStore)(nil).CreateSecret), arg0, arg1)
}

// CreateSecretMetadata mocks base method.
func (m *MockStore) CreateSecretMetadata(arg0 context.Context, arg1 db.CreateSecretMetadataParams) (db.Metadatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretMetadata", arg0, arg1)
	ret0, _ := ret[0].(db.Metadatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecretMetadata indicates an expected call of CreateSecretMetadata.
func (mr *MockStoreMockRecorder) CreateSecretMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretMetadata", reflect.TypeOf((*MockStore)(nil).CreateSecretMetadata), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockStore) DeleteAccount(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockStoreMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), arg0, arg1)
}

// DeleteAllSecretMetadata mocks base method.
func (m *MockStore) DeleteAllSecretMetadata(arg0 context.Context, arg1 db.DeleteAllSecretMetadataParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSecretMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllSecretMetadata indicates an expected call of DeleteAllSecretMetadata.
func (mr *MockStoreMockRecorder) DeleteAllSecretMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSecretMetadata", reflect.TypeOf((*MockStore)(nil).DeleteAllSecretMetadata), arg0, arg1)
}

// DeleteFile mocks base method.
func (m *MockStore) DeleteFile(arg0 context.Context, arg1 db.DeleteFileParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockStoreMockRecorder) DeleteFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockStore)(nil).DeleteFile), arg0, arg1)
}

// DeleteOneSecretMetadata mocks base method.
func (m *MockStore) DeleteOneSecretMetadata(arg0 context.Context, arg1 db.DeleteOneSecretMetadataParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneSecretMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneSecretMetadata indicates an expected call of DeleteOneSecretMetadata.
func (mr *MockStoreMockRecorder) DeleteOneSecretMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneSecretMetadata", reflect.TypeOf((*MockStore)(nil).DeleteOneSecretMetadata), arg0, arg1)
}

// DeleteSecret mocks base method.
func (m *MockStore) DeleteSecret(arg0 context.Context, arg1 db.DeleteSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockStoreMockRecorder) DeleteSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockStore)(nil).DeleteSecret), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockStore) GetAccount(arg0 context.Context, arg1 string) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStoreMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStore)(nil).GetAccount), arg0, arg1)
}

// GetFile mocks base method.
func (m *MockStore) GetFile(arg0 context.Context, arg1 db.GetFileParams) (db.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", arg0, arg1)
	ret0, _ := ret[0].(db.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockStoreMockRecorder) GetFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockStore)(nil).GetFile), arg0, arg1)
}

// GetSecret mocks base method.
func (m *MockStore) GetSecret(arg0 context.Context, arg1 db.GetSecretParams) (db.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(db.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockStoreMockRecorder) GetSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockStore)(nil).GetSecret), arg0, arg1)
}

// ListFiles mocks base method.
func (m *MockStore) ListFiles(arg0 context.Context, arg1 int64) ([]db.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", arg0, arg1)
	ret0, _ := ret[0].([]db.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockStoreMockRecorder) ListFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockStore)(nil).ListFiles), arg0, arg1)
}

// ListSecretMetadata mocks base method.
func (m *MockStore) ListSecretMetadata(arg0 context.Context, arg1 db.ListSecretMetadataParams) ([]db.Metadatum, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretMetadata", arg0, arg1)
	ret0, _ := ret[0].([]db.Metadatum)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecretMetadata indicates an expected call of ListSecretMetadata.
func (mr *MockStoreMockRecorder) ListSecretMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretMetadata", reflect.TypeOf((*MockStore)(nil).ListSecretMetadata), arg0, arg1)
}

// ListSecrets mocks base method.
func (m *MockStore) ListSecrets(arg0 context.Context, arg1 int64) ([]db.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets", arg0, arg1)
	ret0, _ := ret[0].([]db.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockStoreMockRecorder) ListSecrets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockStore)(nil).ListSecrets), arg0, arg1)
}

// UpdateFilePath mocks base method.
func (m *MockStore) UpdateFilePath(arg0 context.Context, arg1 db.UpdateFilePathParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilePath", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilePath indicates an expected call of UpdateFilePath.
func (mr *MockStoreMockRecorder) UpdateFilePath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilePath", reflect.TypeOf((*MockStore)(nil).UpdateFilePath), arg0, arg1)
}

// UpdateSecret mocks base method.
func (m *MockStore) UpdateSecret(arg0 context.Context, arg1 db.UpdateSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockStoreMockRecorder) UpdateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockStore)(nil).UpdateSecret), arg0, arg1)
}

// UpdateSecretMetadata mocks base method.
func (m *MockStore) UpdateSecretMetadata(arg0 context.Context, arg1 db.UpdateSecretMetadataParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecretMetadata indicates an expected call of UpdateSecretMetadata.
func (mr *MockStoreMockRecorder) UpdateSecretMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretMetadata", reflect.TypeOf((*MockStore)(nil).UpdateSecretMetadata), arg0, arg1)
}
